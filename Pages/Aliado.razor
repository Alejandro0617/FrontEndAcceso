@page "/aliado"
@using BlazorFrontEnd.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inherits ValidacionAcceso

<section class="vh-100" style="background-color: black; color: white;">
    <div class="container-fluid h-100">
        <div class="row d-flex justify-content-center align-items-center h-100">
            <!-- Encabezado -->
            <div class="col-md-9 col-lg-6 col-xl-5 text-center">
                <img src="https://i.imgur.com/6b6psnA.png"
                     class="rounded-circle img-fluid mb-4" alt="Logotipo"
                     style="width: 80px; height: 80px;"> <!-- Logo más pequeño -->
                <h2 style="font-weight: bold;">Gestión de Aliados</h2>
            </div>

            <!-- Contenido principal -->
            <div class="col-md-12">
                <div class="table-wrapper">
                    <div class="table-title" style="background-color: #6610f2; color: white; border-radius: 0.5rem; padding: 1rem;">
                        <div class="row">
                            <div class="col-sm-6">
                                <h3>Lista de <b>Aliados</b></h3>
                            </div>
                            <div class="col-sm-6 text-end">
                                <a href="#addModal" class="btn btn-light btn-sm" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                                    <i class="material-icons">&#xE147;</i> <span>Añadir Aliado</span>
                                </a>
                                <a href="#consultarModal" class="btn btn-light btn-sm" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                                    <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                                </a>
                                <button class="btn btn-danger btn-sm" @onclick="Logout">
                                    <i class="material-icons">&#xE879;</i> <span>Cerrar sesión</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    @if (listado == null)
                    {
                        <p class="text-center text-light">Cargando...</p>
                    }
                    else if (!listado.Any())
                    {
                        <p class="text-center text-light">No hay aliados registrados.</p>
                    }
                    else
                    {
                        <table class="table table-dark table-striped table-hover mt-3">
                            <thead>
                                <tr>
                                    <th>Nit</th>
                                    <th>Razón Social</th>
                                    <th>Nombre Contacto</th>
                                    <th>Correo</th>
                                    <th>Teléfono</th>
                                    <th>Ciudad</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var sele in listado)
                                {
                                    <tr>
                                        <td>@sele["nit"]</td>
                                        <td>@sele["razon_social"]</td>
                                        <td>@sele["nombre_contacto"]</td>
                                        <td>@sele["correo"]</td>
                                        <td>@sele["telefono"]</td>
                                        <td>@sele["ciudad"]</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
    </div>
</section>

@code {
   
    private List<Dictionary<string, object>> listado = new List<Dictionary<string, object>>();
    private Dictionary<string, object> currentSele = new Dictionary<string, object>();
    private bool isNewSele = true;
    private bool seleEncontrada = false;

    <!-- CAMBIAR EN CADA TABLA -->
    private int nit;
    private string razon_social = "";
    private string nombre_contacto = "";
    private string correo = "";
    private string telefono = "";
    private string ciudad = "";

    private string consulta1 = "";
    private string consulta2 = "";
    private string consulta3 = "";
    private string consulta4 = "";
    private string consulta5 = "";
    private string consulta6 = "";
    <!-- FIN -->

    protected override async Task OnInitializedAsync()
    {
        await LoadListados();
    }
 
    private async Task LoadListados()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            listado = await ApiService.GetDataAsync("api/proyecto/aliado");
            <!-- FIN -->
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Error al cargar aliados: {ex.Message}");
            Console.WriteLine($"Error al cargar aliados: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar aliados: "+ex.Message);
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? sele = null)
    {
        isNewSele = sele == null;
        currentSele = sele ?? new Dictionary<string, object>();

        <!-- CAMBIAR EN CADA TABLA -->
        nit = currentSele.TryGetValue("nit", out var i) ? Convert.ToInt32(i) : 0;
        razon_social = currentSele.TryGetValue("razon_social", out var n) ? n?.ToString() ?? "" : "";
        nombre_contacto = currentSele.TryGetValue("nombre_contacto", out var o) ? o?.ToString() ?? "" : "";
        correo = currentSele.TryGetValue("correo", out var u) ? u?.ToString() ?? "" : "";
        telefono = currentSele.TryGetValue("telefono", out var p) ? p?.ToString() ?? "" : "";
        ciudad = currentSele.TryGetValue("ciudad", out var l) ? l?.ToString() ?? "" : "";
        <!-- FIN -->
        //MODIFIED
        JSRuntime.InvokeVoidAsync("showModal", "editModal");
        // END MODIFIED
    }
 
    private void PrepareForConsulta()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        consulta1 = "";
        consulta2 = "";
        consulta3 = "";
        consulta4 = "";
        consulta5 = "";
        consulta6 = "";
        <!-- FIN -->
        seleEncontrada = false;
    }
 
    private void SetSeleToDelete(Dictionary<string, object> sele)
    {
        // MODIFIED
        currentSele = sele;
        // END MODIFIED
    }
 
    private async Task SaveSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            currentSele["nit"] = nit;
            currentSele["razon_social"] = razon_social;
            currentSele["nombre_contacto"] = nombre_contacto;
            currentSele["correo"] = correo;
            currentSele["telefono"] = telefono;
            currentSele["ciudad"] = ciudad;
            <!-- FIN -->
 
            bool success;
            if (isNewSele)
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.AddEntityAsync("api/proyecto/aliado", currentSele);
                <!-- FIN -->
            }
            else
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.EditEntityAsync("api/proyecto/aliado/nit", nit, currentSele);
                <!-- FIN -->
            }
 
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addModal");
 
                await LoadListados();
                <!-- CAMBIAR EN CADA TABLA -->
                nit = 0;
                razon_social = string.Empty;
                nombre_contacto = string.Empty;
                correo = string.Empty;
                telefono = string.Empty;
                ciudad = string.Empty;
                <!-- FIN -->

                currentSele = new Dictionary<string, object>();
                isNewSele = true;
 
                StateHasChanged();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el aliado. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar aliado: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el aliado. Por favor, intente nuevamente.");
        }
    }

    private async Task DeleteSele()
    {
        try
        {
            // MODIFIED
            <!-- CAMBIAR EN CADA TABLA -->
            if (currentSele.TryGetValue("nit", out var prmObj) && prmObj is string prmStr && int.TryParse(prmStr, out int prmInt))
            {
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/aliado/nit", prmInt);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteModal");
                    await LoadListados();
                    await JSRuntime.InvokeVoidAsync("alert", "Aliado eliminado con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el aliado. Por favor, intente nuevamente.");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "El valor de 'nit' no es un número válido.");
            }
            // END MODIFIED
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar aliado: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el aliado. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ConsultarSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            var resultado = await ApiService.GetDataAsync($"api/proyecto/aliado/nit/{consulta1}");
            if (resultado.Any())
            {
                var seleConsultada = resultado.First();
                consulta2 = seleConsultada["razon_social"]?.ToString() ?? "";
                consulta3 = seleConsultada["nombre_contacto"]?.ToString() ?? "";
                consulta4 = seleConsultada["correo"]?.ToString() ?? "";
                consulta5 = seleConsultada["telefono"]?.ToString() ?? "";
                consulta6 = seleConsultada["ciudad"]?.ToString() ?? "";
                seleEncontrada = true;
            }
            else
            {
                consulta2 = "";
                consulta3 = "";
                consulta4 = "";
                consulta5 = "";
                consulta6 = "";
                seleEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ningun aliado con ese ID.");
            }
            StateHasChanged();
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar aliado: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar el aliado. Por favor, intente nuevamente.");
        }
    }

    // MODIFIED
    private async Task ModificarSeleConsultada()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["nit"] = consulta1,
            ["razon_social"] = consulta2,
            ["nombre_contacto"] = consulta3,
            ["correo"] = consulta4,
            ["telefono"] = consulta5,
            ["ciudad"] = consulta6
        });
        <!-- FIN -->
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
        await JSRuntime.InvokeVoidAsync("showModal", "addModal");
    }
    // END MODIFIED

    // MODIFIED
    private async Task EliminarSeleConsultada()
    {
        SetSeleToDelete(new Dictionary<string, object>
        {
            ["nit"] = consulta1,
            ["razon_social"] = consulta2,
            ["nombre_contacto"] = consulta3,
            ["correo"] = consulta4,
            ["telefono"] = consulta5,
            ["ciudad"] = consulta6
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
        await JSRuntime.InvokeVoidAsync("showModal", "deleteModal");
    }
    // END MODIFIED
    private async Task Logout()
    {
        try
        {
            // Limpia el almacenamiento de sesión
            await JSRuntime.InvokeVoidAsync("sessionStorage.clear");

            // Redirige al usuario a la página de inicio de sesión
            NavigationManager.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error durante el cierre de sesión: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", "Error durante el cierre de sesión:", ex);
        }
    }
}