@page "/"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<section style="min-height: 100vh; background-color: black; color: white; display: flex; align-items: center; justify-content: center;">
    <div class="container">
        <h2 class="text-center mb-4" style="color: #fff;">Base de Datos - Gestión Profesoral</h2>

        @if (string.IsNullOrEmpty(usuarioEmail))
        {
            <div class="text-center">
                <p style="font-size: 1.2rem;">¡Bienvenido! Para acceder al contenido de las tablas, primero debes iniciar sesión.</p>
                <button class="btn btn-primary" 
                        style="background-color: #6610f2; border: none; border-radius: 0.5rem; padding: 0.75rem 1.5rem;" 
                        @onclick="RedirectToLogin">Iniciar Sesión</button>
            </div>
        }
        else
        {
            <div style="background-color: #1e1e1e; padding: 20px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);">
                <h4 style="color: #6610f2;">Información del Usuario</h4>
                <p><strong>Email:</strong> @usuarioEmail</p>

                <h5 style="color: #6610f2;">Roles:</h5>
                <ul style="list-style-type: none; padding: 0;">
                    @foreach (var rol in roles)
                    {
                        <li style="padding: 5px 10px; background-color: #292929; margin-bottom: 5px; border-radius: 4px;">
                            @rol
                        </li>
                    }
                </ul>

                <h5 style="color: #6610f2;">Rutas a las que tiene acceso:</h5>
                <div style="margin-bottom: 20px;">
                    @foreach (var ruta in rutas)
                    {
                        <button class="btn btn-outline-light" 
                                style="margin: 5px; padding: 0.5rem 1rem; border: 1px solid #6610f2; border-radius: 4px;" 
                                @onclick="@(() => NavegarARuta(ruta))">@ruta</button>
                    }
                </div>

                <button class="btn btn-danger" style="padding: 0.5rem 1.5rem;" @onclick="Logout">Cerrar Sesión</button>
            </div>
        }
    </div>
</section>

@code {
    private string usuarioEmail = "";
    private List<string> roles = new List<string>();
    private List<string> rutas = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 1. Obtener el email del sessionStorage
            usuarioEmail = await JSRuntime.InvokeAsync<string>("sessionStorage.getItem", "usuarioEmail");
            Console.WriteLine($"Email obtenido: {usuarioEmail}");

            if (!string.IsNullOrEmpty(usuarioEmail))
            {
                // 2. Obtener roles (keys que empiezan con rol_)
                var scriptRoles = @"
                    Object.keys(sessionStorage)
                        .filter(key => key.startsWith('rol_'))
                        .map(key => sessionStorage.getItem(key))
                ";
                roles = await JSRuntime.InvokeAsync<List<string>>("eval", scriptRoles);
                Console.WriteLine($"Roles obtenidos: {string.Join(", ", roles)}");

                // 3. Obtener rutas (keys que empiezan con ruta_)
                var scriptRutas = @"
                    Object.keys(sessionStorage)
                        .filter(key => key.startsWith('ruta_'))
                        .map(key => sessionStorage.getItem(key))
                ";
                rutas = await JSRuntime.InvokeAsync<List<string>>("eval", scriptRutas);
                Console.WriteLine($"Rutas obtenidas: {string.Join(", ", rutas)}");
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Console.WriteLine($"StackTrace: {ex.StackTrace}");
            
            // También mostrar el error en la consola del navegador
            await JSRuntime.InvokeVoidAsync("console.error", "Error:", ex);
        }
    }

    private void NavegarARuta(string ruta)
    {
        // Redirige a la ruta específica
        NavigationManager.NavigateTo(ruta);
    }

    private void RedirectToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private async Task Logout()
    {
        try
        {
            // Limpia el almacenamiento de sesión
            await JSRuntime.InvokeVoidAsync("sessionStorage.clear");

            // Redirige al usuario a la página de inicio de sesión
            NavigationManager.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error durante el cierre de sesión: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", "Error durante el cierre de sesión:", ex);
        }
    }
}
