@page "/experiencia"
<!--
Define la URL relativa que carga este componente. En este caso, cuando un usuario navega a "/experiencia",
este componente Blazor se carga y se representa en la página.
-->
@using BlazorFrontEnd.Services
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inherits ValidacionAcceso

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Experiencia</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#addModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nueva Experiencia</span>
                        </a>
 
                        <a href="#consultarModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Experiencia</span>
                        </a>
                            <!-- Botón de cerrar sesión -->
                             <button class="btn btn-danger" @onclick="Logout">
                                <i class="material-icons">&#xE879;</i> <span>Cerrar Sesión</span>
                            </button>
                    </div>
                </div>
            </div>
            @if (listado == null)
            {
                <p>Cargando...</p>
            }
            else if (!listado.Any())
            {
                <p>No hay Experiencias registradas.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <!-- CAMBIAR EN CADA TABLA -->
                            <th>Id</th>
                            <th>Nombre Cargo</th>
                            <th>Institución</th>
                            <th>Tipo</th>
                            <th>Fecha Inicio</th>
                            <th>Fecha Fin</th>
                            <th>Docente</th>
                            <!-- FIN -->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sele in listado)
                        {
                            <tr>
                                <!-- CAMBIAR EN CADA TABLA -->
                                <td>@sele["id"]</td>
                                <td>@sele["nombre_cargo"]</td>
                                <td>@sele["institucion"]</td>
                                <td>@sele["tipo"]</td>
                                <td>@sele["fecha_inicio"]</td>
                                <td>@sele["fecha_fin"]</td>
                                <td>@sele["docente"]</td>
                                <!-- FIN -->
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentSele" OnValidSubmit="SaveSele">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="addModalLabel">@(isNewSele ? "Añadir" : "Editar") Experiencia</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- CAMBIAR EN CADA TABLA -->
                    <div class="form-group">
                        <label>Id</label>
                        <InputNumber class="form-control" @bind-Value="id" />
                        <ValidationMessage For="@(() => id)" />
                    </div>
                    <div class="form-group">
                        <label>Nombre Cargo</label>
                        <InputText class="form-control" @bind-Value="nombre_cargo" />
                        <ValidationMessage For="@(() => nombre_cargo)" />
                    </div>
                    <div class="form-group">
                        <label>Institución</label>
                        <InputText class="form-control" @bind-Value="institucion" />
                        <ValidationMessage For="@(() => institucion)" />
                    </div>
                    <div class="form-group">
                        <label>Tipo</label>
                        <InputText class="form-control" @bind-Value="tipo" />
                        <ValidationMessage For="@(() => tipo)" />
                    </div>
                    <div class="form-group">
                        <label>Fecha Inicio</label>
                        <InputDate class="form-control" @bind-Value="fecha_inicio" />
                        <ValidationMessage For="@(() => fecha_inicio)" />
                    </div>
                    <div class="form-group">
                        <label>Fecha Fin</label>
                        <InputDate class="form-control" @bind-Value="fecha_fin" />
                        <ValidationMessage For="@(() => fecha_fin)" />
                    </div>
                    <div class="form-group">
                        <label>Docente</label>
                        <InputNumber class="form-control" @bind-Value="docente" />
                        <ValidationMessage For="@(() => docente)" />
                    </div>
                    <!-- FIN -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewSele ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Eliminar Experiencia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar esta Experiencia?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSele">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="consultarModal" tabindex="-1" role="dialog" aria-labelledby="consultarModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarModalLabel">Consultar Experiencia</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- CAMBIAR EN CADA TABLA -->
                <div class="form-group">
                    <label>Id</label>
                    <input type="text" class="form-control" @bind="consulta1" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Nombre Cargo</label>
                    <input type="text" class="form-control" @bind="consulta2" readonly />
                </div>
                <div class="form-group">
                    <label>Institución</label>
                    <input type="text" class="form-control" @bind="consulta3" readonly />
                </div>
                <div class="form-group">
                    <label>Tipo</label>
                    <input type="text" class="form-control" @bind="consulta4" readonly />
                </div>
                <div class="form-group">
                    <label>Fecha Inicio</label>
                    <input type="text" class="form-control" @bind="consulta5" readonly />
                </div>
                <div class="form-group">
                    <label>Fecha Fin</label>
                    <input type="text" class="form-control" @bind="consulta6" readonly />
                </div>
                <div class="form-group">
                    <label>Docente</label>
                    <input type="text" class="form-control" @bind="consulta7" readonly />
                </div>
                <!-- FIN -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarSele">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarSeleConsultada" disabled="@(!seleEncontrada)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarSeleConsultada" disabled="@(!seleEncontrada)">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
   
    private List<Dictionary<string, object>> listado = new List<Dictionary<string, object>>();
    private Dictionary<string, object> currentSele = new Dictionary<string, object>();
    private bool isNewSele = true;
    private bool seleEncontrada = false;

    <!-- CAMBIAR EN CADA TABLA -->
    private int id;
    private string nombre_cargo;
    private string institucion;
    private string tipo;
    private DateTime? fecha_inicio;
    private DateTime? fecha_fin;
    private int docente;

    private string consulta1 = "";
    private string consulta2 = "";
    private string consulta3 = "";
    private string consulta4 = "";
    private string consulta5 = "";
    private string consulta6 = "";
    private string consulta7 = "";
    <!-- FIN -->

    protected override async Task OnInitializedAsync()
    {
        await LoadListados();
    }
 
    private async Task LoadListados()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            listado = await ApiService.GetDataAsync("api/proyecto/experiencia");
            <!-- FIN -->
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Error al cargar experiencias: {ex.Message}");
            Console.WriteLine($"Error al cargar experiencias: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar experiencias: "+ex.Message);
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? sele = null)
    {
        isNewSele = sele == null;
        currentSele = sele ?? new Dictionary<string, object>();

        <!-- CAMBIAR EN CADA TABLA -->
        id = currentSele.TryGetValue("id", out var a) ? Convert.ToInt32(a) : 0;
        nombre_cargo = currentSele.TryGetValue("nombre_cargo", out var b) ? b?.ToString() ?? "" : "";
        institucion = currentSele.TryGetValue("institucion", out var c) ? c?.ToString() ?? "" : "";
        tipo = currentSele.TryGetValue("tipo", out var d) ? d?.ToString() ?? "" : "";
        fecha_inicio = currentSele.TryGetValue("fecha_inicio", out var e) ? Convert.ToDateTime(e) : default(DateTime);
        fecha_fin = currentSele.TryGetValue("fecha_fin", out var f) && f != null ? Convert.ToDateTime(f) : (DateTime?)null;
        docente = currentSele.TryGetValue("docente", out var g) ? Convert.ToInt32(g) : 0;
        <!-- FIN -->
       
        JSRuntime.InvokeVoidAsync("showModal", "editModal");
    }
 
    private void PrepareForConsulta()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        consulta1 = "";
        consulta2 = "";
        consulta3 = "";
        consulta4 = "";
        consulta5 = "";
        consulta6 = "";
        consulta7 = "";
        <!-- FIN -->
        seleEncontrada = false;
    }
 
    private void SetSeleToDelete(Dictionary<string, object> sele)
    {
        currentSele = sele;
    }
 
    private async Task SaveSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            currentSele["id"] = id;
            currentSele["nombre_cargo"] = nombre_cargo;
            currentSele["institucion"] = institucion;
            currentSele["tipo"] = tipo;
            currentSele["fecha_inicio"] = fecha_inicio;
            currentSele["fecha_fin"] = fecha_fin.HasValue ? fecha_fin.Value : null;
            currentSele["docente"] = docente;
            <!-- FIN -->
 
            bool success;
            if (isNewSele)
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.AddEntityAsync("api/proyecto/experiencia", currentSele);
                <!-- FIN -->
            }
            else
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.EditEntityAsync("api/proyecto/experiencia/id", id, currentSele);
                <!-- FIN -->
            }
 
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addModal");
 
                await LoadListados();
                <!-- CAMBIAR EN CADA TABLA -->
                id = 0;
                nombre_cargo = string.Empty;
                institucion = string.Empty;
                tipo = string.Empty;
                fecha_inicio = DateTime.MinValue;
                fecha_fin = DateTime.MinValue;
                docente = 0;
                <!-- FIN -->

                currentSele = new Dictionary<string, object>();
                isNewSele = true;
 
                StateHasChanged();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar la experiencia. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar experiencia: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "ERROR.");
        }
    }
 
    private async Task DeleteSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            if (currentSele.TryGetValue("id", out var prmObj) && prmObj is string prmStr && int.TryParse(prmStr, out int prmInt))
            {
                bool success = await ApiService.DeleteEntityAsync("api/proyecto/experiencia/id", prmInt);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteModal");
                    await LoadListados();
                    await JSRuntime.InvokeVoidAsync("alert", "Experiencia eliminada con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar experiencia. Por favor, intente nuevamente.");
                }
            }
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar experiencia: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el experiencia. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ConsultarSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            var resultado = await ApiService.GetDataAsync($"api/proyecto/experiencia/id/{consulta1}");
            if (resultado.Any())
            {
                var seleConsultada = resultado.First();
                consulta2 = seleConsultada["nombre_cargo"]?.ToString() ?? "";
                consulta3 = seleConsultada["institucion"]?.ToString() ?? "";
                consulta4 = seleConsultada["tipo"]?.ToString() ?? "";
                consulta5 = seleConsultada["fecha_inicio"]?.ToString() ?? "";
                consulta6 = seleConsultada["fecha_fin"]?.ToString() ?? "";
                consulta7 = seleConsultada["docente"]?.ToString() ?? "";
                seleEncontrada = true;
            }
            else
            {
                consulta2 = "";
                consulta3 = "";
                consulta4 = "";
                consulta5 = "";
                consulta6 = "";
                consulta7 = "";
                seleEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ninguna experiencia con ese ID.");
            }
            StateHasChanged();
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar experiencia: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar experiencia. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ModificarSeleConsultada()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["id"] = consulta1,
            ["nombre_cargo"] = consulta2,
            ["institucion"] = consulta3,
            ["tipo"] = consulta4,
            ["fecha_inicio"] = consulta5,
            ["fecha_fin"] = string.IsNullOrEmpty(consulta6) ? null : consulta6,
            ["docente"] = consulta7
        });
        <!-- FIN -->
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
        await JSRuntime.InvokeVoidAsync("removeModalBackdrops");
        await JSRuntime.InvokeVoidAsync("showModal", "addModal");
    }

    private async Task EliminarSeleConsultada()
    {
        SetSeleToDelete(new Dictionary<string, object>
        {
            ["id"] = consulta1,
            ["nombre_cargo"] = consulta2,
            ["institucion"] = consulta3,
            ["tipo"] = consulta4,
            ["fecha_inicio"] = consulta5,
            ["fecha_fin"] = string.IsNullOrEmpty(consulta6) ? null : consulta6,
            ["docente"] = consulta7
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
        await JSRuntime.InvokeVoidAsync("removeModalBackdrops");
        await JSRuntime.InvokeVoidAsync("showModal", "deleteModal");
    }

    private async Task Logout()
    {
        try
        {
            // Limpia el almacenamiento de sesión
            await JSRuntime.InvokeVoidAsync("sessionStorage.clear");

            // Redirige al usuario a la página de inicio de sesión
            NavigationManager.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error durante el cierre de sesión: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", "Error durante el cierre de sesión:", ex);
        }
    }
}