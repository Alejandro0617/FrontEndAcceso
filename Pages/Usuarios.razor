@page "/usuarios"
@using BlazorFrontEnd.Services
@using BlazorFrontEnd.Models
@inject ApiService ApiService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inherits ValidacionAcceso

<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>USUARIOS</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#addModal" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepareForAddOrEdit()">
                            <i class="material-icons">&#xE147;</i> <span>Añadir Nuevo Usuario</span>
                        </a>
 
                        <a href="#consultarModal" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepareForConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar Usuario</span>
                        </a>
                            <!-- Botón de cerrar sesión -->
                             <button class="btn btn-danger" @onclick="Logout">
                                <i class="material-icons">&#xE879;</i> <span>Cerrar Sesión</span>
                            </button>
                    </div>
                </div>
            </div>
            @if (listado == null)
            {
                <p>Cargando...</p>
            }
            else if (!listado.Any())
            {
                <p>No hay usuarios registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <!-- CAMBIAR EN CADA TABLA -->
                            <th>Email</th>
                            <th>Contraseña</th>
                            <!-- FIN -->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sele in listado) // MODIFIED
                        {
                            <tr>
                                <!-- CAMBIAR EN CADA TABLA -->
                                <td>@sele["email"]</td>
                                <td>@sele["contrasena"]</td>
                                <!-- FIN -->
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
<br>
<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>ROLES</b></h2>
                    </div>
                </div>
            </div>
            @if (listado2 == null)
            {
                <p>Cargando...</p>
            }
            else if (!listado2.Any())
            {
                <p>No hay usuarios registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <!-- CAMBIAR EN CADA TABLA -->
                            <th>Email</th>
                            <th>Id Rol</th>
                            <!-- FIN -->
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var sele in listado2) // MODIFIED
                        {
                            <tr>
                                <!-- CAMBIAR EN CADA TABLA -->
                                <td>@sele["fkemail"]</td>
                                <td>@sele["fkidrol"]</td>
                                <!-- FIN -->
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>
<div class="modal fade" id="addModal" tabindex="-1" role="dialog" aria-labelledby="addModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@currentSele" OnValidSubmit="SaveSele">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="addModalLabel">@(isNewSele ? "Añadir" : "Editar") Usuario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- CAMBIAR EN CADA TABLA -->
                    <div class="form-group">
                        <label>Email</label>
                        <InputText class="form-control" @bind-Value="email" />
                        <ValidationMessage For="@(() => email)" />
                    </div>
                    <div class="form-group">
                        <label>Contraseña</label>
                        <InputText class="form-control" @bind-Value="contrasena" />
                        <ValidationMessage For="@(() => contrasena)" />
                    </div>
                    <div class="form-group">
                        <label>Rol</label>
                        <select class="form-control" @bind="fkidrol">
                        <option value="">Seleccione un rol</option>
                        @foreach (var rol in roles)
                        {
                            <option value="@rol.Id">@rol.Nombre</option>
                        }
                        </select>
                        <ValidationMessage For="@(() => fkidrol)" />
                    </div>
                    <!-- FIN -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(isNewSele ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Eliminar Usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar esta usuario?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="DeleteSele">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="consultarModal" tabindex="-1" role="dialog" aria-labelledby="consultarModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="consultarModalLabel">Consultar Usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- CAMBIAR EN CADA TABLA -->
                <div class="form-group">
                    <label>Email</label>
                    <input type="text" class="form-control" @bind="consulta1" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Contraseña</label>
                    <input type="text" class="form-control" @bind="consulta2" readonly />
                </div>
                <div class="form-group">
                    <label>Rol</label>
                    <input type="text" class="form-control" @bind="consulta3" readonly />
                </div>
                <!-- FIN -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarSele">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarSeleConsultada" disabled="@(!seleEncontrada)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarSeleConsultada" disabled="@(!seleEncontrada)">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
   
    private List<Dictionary<string, object>> listado = new List<Dictionary<string, object>>();
    private List<Dictionary<string, object>> listado2 = new List<Dictionary<string, object>>();
    private Dictionary<string, object> currentSele = new Dictionary<string, object>();
    private Dictionary<string, object> currentSele2 = new Dictionary<string, object>();
    private bool isNewSele = true;
    private bool seleEncontrada = false;
    private List<Rol> roles = new List<Rol>
    {
        new Rol { Id = 1, Nombre = "Usuario"},
        new Rol { Id = 2, Nombre = "Administrador"}
    };

    <!-- CAMBIAR EN CADA TABLA -->
    private string email = "";
    private string contrasena = "";
    private int fkidrol;

    private string consulta1 = "";
    private string consulta2 = "";
    private string consulta3 = "";
    <!-- FIN -->

    protected override async Task OnInitializedAsync()
    {
        await LoadListados();
    }
 
    private async Task LoadListados()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            listado = await ApiService.GetDataAsync("api/proyecto/usuario");
            listado2 = await ApiService.GetDataAsync("api/proyecto/rol_usuario");
            <!-- FIN -->
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Error al cargar usuarios: {ex.Message}");
            Console.WriteLine($"Error al cargar usuarios: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al cargar usuarios: "+ex.Message);
        }
    }
 
    private void PrepareForAddOrEdit(Dictionary<string, object>? sele = null, Dictionary<string, object>? sele2 = null)
    {
        isNewSele = sele == null;
        currentSele = sele ?? new Dictionary<string, object>();
        currentSele2 = sele2 ?? new Dictionary<string, object>();

        <!-- CAMBIAR EN CADA TABLA -->
        email = currentSele.TryGetValue("email", out var a) ? a?.ToString() ?? "" : "";
        contrasena = currentSele.TryGetValue("contrasena", out var b) ? b?.ToString() ?? "" : "";

        fkidrol = currentSele2.TryGetValue("fkidrol", out var c) ? Convert.ToInt32(c) : 0;
        <!-- FIN -->
        //MODIFIED
        JSRuntime.InvokeVoidAsync("showModal", "editModal");
        // END MODIFIED
    }
 
    private void PrepareForConsulta()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        consulta1 = "";
        consulta2 = "";
        consulta3 = "";
        <!-- FIN -->
        seleEncontrada = false;
    }
 
    private void SetSeleToDelete(Dictionary<string, object> sele, Dictionary<string, object> sele2)
    {
        // MODIFIED
        currentSele = sele;
        currentSele2 = sele2;
        // END MODIFIED
    }
 
    private async Task SaveSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            currentSele["email"] = email;
            currentSele["contrasena"] = contrasena;

            currentSele2["fkemail"] = email;
            currentSele2["fkidrol"] = fkidrol;
            <!-- FIN -->
 
            bool success;
            bool success2;
            if (isNewSele)
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.AddEntityAsync("api/proyecto/usuario", currentSele);
                success2 = await ApiService.AddEntityAsync("api/proyecto/rol_usuario", currentSele2);
                <!-- FIN -->
            }
            else
            {
                <!-- CAMBIAR EN CADA TABLA -->
                success = await ApiService.EditEntityAsyncStr("api/proyecto/usuario/email", email, currentSele);
                success2 = await ApiService.EditEntityAsyncStr("api/proyecto/rol_usuario/fkemail", email, currentSele2);
                <!-- FIN -->
            }
 
            if (success)
            {
                await JSRuntime.InvokeVoidAsync("hideModal", "addModal");
 
                await LoadListados();
                <!-- CAMBIAR EN CADA TABLA -->
                email = string.Empty;
                contrasena = string.Empty;
                fkidrol = 0;
                <!-- FIN -->

                currentSele = new Dictionary<string, object>();
                currentSele2 = new Dictionary<string, object>();
                isNewSele = true;
 
                StateHasChanged();
 
                await JSRuntime.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el usuario. Por favor, intente nuevamente.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar usuario: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al guardar el usuario. Por favor, intente nuevamente.");
        }
    }

    private async Task DeleteSele()
    {
        try
        {
            // MODIFIED
            <!-- CAMBIAR EN CADA TABLA -->
            if (currentSele.TryGetValue("email", out var prmObj) && prmObj is string prmStr)
            {
                bool success = await ApiService.DeleteEntityAsyncStr("api/proyecto/usuario/email", prmStr);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteModal");
                    await LoadListados();
                    await JSRuntime.InvokeVoidAsync("alert", "Usuario eliminado con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el usuario. Por favor, intente nuevamente.");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "El valor de 'nit' no es un número válido.");
            }
            if (currentSele2.TryGetValue("fkemail", out var prmObj2) && prmObj2 is string prmStr2)
            {
                bool success = await ApiService.DeleteEntityAsyncStr("api/proyecto/rol_usuario/fkemail", prmStr2);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("hideModal", "deleteModal");
                    await LoadListados();
                    await JSRuntime.InvokeVoidAsync("alert", "Usuario eliminado con éxito.");
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el usuario. Por favor, intente nuevamente.");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "El valor de 'nit' no es un número válido.");
            }
            // END MODIFIED
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar usuario: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al eliminar el usuario. Por favor, intente nuevamente.");
        }
    }
 
    private async Task ConsultarSele()
    {
        try
        {
            <!-- CAMBIAR EN CADA TABLA -->
            var resultado = await ApiService.GetDataAsync($"api/proyecto/usuario/email/{consulta1}");
            var resultado2 = await ApiService.GetDataAsync($"api/proyecto/rol_usuario/fkemail/{consulta1}");
            if (resultado.Any())
            {
                var seleConsultada = resultado.First();
                consulta2 = seleConsultada["contrasena"]?.ToString() ?? "";
                seleEncontrada = true;
            } 
            else
            {
                consulta2 = "";
                seleEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ningun usuario con ese ID.");
            }
            if (resultado2.Any())
            {
                var seleConsultada2 = resultado2.First();
                consulta3 = seleConsultada2["fkidrol"]?.ToString() ?? "";
                seleEncontrada = true;
            } else{
                consulta3 = "";
                seleEncontrada = false;
                await JSRuntime.InvokeVoidAsync("alert", "No se encontró ningun usuario con ese ID.");
            }
            StateHasChanged();
            <!-- FIN -->
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar usuario: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Error al consultar el usuario. Por favor, intente nuevamente.");
        }
    }

    // MODIFIED
    private async Task ModificarSeleConsultada()
    {
        <!-- CAMBIAR EN CADA TABLA -->
        PrepareForAddOrEdit(new Dictionary<string, object>
        {
            ["email"] = consulta1,
            ["contrasena"] = consulta2
        }, new Dictionary<string, object>{
            ["fkemail"] = consulta1,
            ["fkidrol"] = consulta3
        });
        <!-- FIN -->
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
        await JSRuntime.InvokeVoidAsync("removeModalBackdrops");
        await JSRuntime.InvokeVoidAsync("showModal", "addModal");
    }
    // END MODIFIED

    // MODIFIED
    private async Task EliminarSeleConsultada()
    {
        SetSeleToDelete(new Dictionary<string, object>
        {
            ["email"] = consulta1,
            ["contrasena"] = consulta2
        }, new Dictionary<string, object>{
            ["fkemail"] = consulta1,
            ["fkidrol"] = consulta3
        });
        await JSRuntime.InvokeVoidAsync("hideModal", "consultarModal");
        await JSRuntime.InvokeVoidAsync("removeModalBackdrops");
        await JSRuntime.InvokeVoidAsync("showModal", "deleteModal");
    }
    // END MODIFIED

    private async Task Logout()
    {
        try
        {
            // Limpia el almacenamiento de sesión
            await JSRuntime.InvokeVoidAsync("sessionStorage.clear");

            // Redirige al usuario a la página de inicio de sesión
            NavigationManager.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error durante el cierre de sesión: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("console.error", "Error durante el cierre de sesión:", ex);
        }
    }
}